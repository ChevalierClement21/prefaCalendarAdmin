@page "/dashboard"
@using prefaCalendarAdmin.Models.Session
@using prefaCalendarAdmin.Services
@using Microsoft.JSInterop
@inject ISessionService SessionService
@inject ISessionStatsService SessionStatsService
@inject IJSRuntime JSRuntime

<link href="css/components/dashboard.css" rel="stylesheet" />

<AuthorizeView>
    <div class="dashboard-container">

        @if (isLoading)
        {
            <div class="loading">Chargement des données...</div>
        }
        else if (errorMessage != null)
        {
            <div class="error">@errorMessage</div>
        }
        else
        {
            <div class="session-selectors-container">
                <div class="session-row">
                    <div class="session-label">Session principale:</div>
                    <div class="session-input">
                        <select id="mainSession" class="form-select" @bind="selectedSessionId" @bind:event="onchange" @bind:after="OnSessionSelectedAsync">
                            @foreach (var session in sessions)
                            {
                                <option value="@session.Id">@session.Name (@session.Year)</option>
                            }
                        </select>
                    </div>
                </div>
                
                <div class="session-row checkbox-row">
                    <div class="session-label"></div>
                    <div class="session-input">
                        <label for="enableComparison" class="checkbox-label">
                            <input type="checkbox" id="enableComparison" 
                                   @bind="comparisonEnabled" 
                                   @bind:event="onchange" 
                                   @bind:after="OnToggleComparisonAsync" />
                            Activer la comparaison
                        </label>
                    </div>
                </div>
                
                @if (comparisonEnabled)
                {
                    <div class="session-row">
                        <div class="session-label">Session de comparaison:</div>
                        <div class="session-input">
                            <select id="comparisonSession" class="form-select" @bind="comparisonSessionId" @bind:event="onchange" @bind:after="OnComparisonSessionSelectedAsync"
                                    disabled="@(!comparisonEnabled)">
                                @foreach (var session in sessions.Where(s => s.Id != selectedSessionId))
                                {
                                    <option value="@session.Id">@session.Name (@session.Year)</option>
                                }
                            </select>
                        </div>
                    </div>
                }
            </div>

            <div class="total-amount @(comparisonEnabled ? "with-comparison" : "")">
                <div class="main-stats">
                    <h2>Montant total global</h2>
                    <div class="amount">€@stats.TotalAmount.ToString("N0").Replace(" ", "&nbsp;")</div>
                    <div class="calendars-sold">@stats.TotalCalendarsSold calendriers vendus</div>
                </div>
                
                @if (comparisonEnabled && comparisonStats != null)
                {
                    <div class="comparison-stats">
                        <h3>Comparaison avec @GetSessionName(comparisonSessionId)</h3>
                        <div class="amount">€@comparisonStats.TotalAmount.ToString("N0").Replace(" ", "&nbsp;")</div>
                        <div class="calendars-sold">@comparisonStats.TotalCalendarsSold calendriers vendus</div>
                        
                        <div class="comparison-diff">
                            @{
                                decimal amountDiff = stats.TotalAmount - comparisonStats.TotalAmount;
                                decimal amountPercent = comparisonStats.TotalAmount == 0 ? 0 : 
                                    (stats.TotalAmount - comparisonStats.TotalAmount) / comparisonStats.TotalAmount * 100;
                                int calendarsDiff = stats.TotalCalendarsSold - comparisonStats.TotalCalendarsSold;
                                decimal calendarsPercent = comparisonStats.TotalCalendarsSold == 0 ? 0 : 
                                    (decimal)(stats.TotalCalendarsSold - comparisonStats.TotalCalendarsSold) / comparisonStats.TotalCalendarsSold * 100;
                                
                                string amountDiffClass = amountDiff >= 0 ? "positive" : "negative";
                                string calendarsDiffClass = calendarsDiff >= 0 ? "positive" : "negative";
                            }
                            
                            <div class="diff-amount @amountDiffClass">
                                @(amountDiff >= 0 ? "+" : "")€@amountDiff.ToString("N0").Replace(" ", "&nbsp;") (@(amountPercent >= 0 ? "+" : "")@amountPercent.ToString("N1")%)
                            </div>
                            <div class="diff-calendars @calendarsDiffClass">
                                @(calendarsDiff >= 0 ? "+" : "")@calendarsDiff calendriers (@(calendarsPercent >= 0 ? "+" : "")@calendarsPercent.ToString("N1")%)
                            </div>
                        </div>
                        @if (comparisonEnabled && comparisonStats != null)
                        {
                            @foreach (var comparisonSector in comparisonStats.Sectors.Where(cs => !stats.Sectors.Any(s => s.Id == cs.Id)))
                            {
                                <div class="sector-card comparison-only" style="border-left: 5px solid @comparisonSector.Color">
                                    <h3>@comparisonSector.Name</h3>
                                    <div class="sector-amount comparison-only-text">Secteur présent uniquement dans la session de comparaison</div>
                                    <div class="sector-details">
                                        <div>Tours dans la session de comparaison: @comparisonSector.ToursCount</div>
                                        <div>Calendriers vendus: @comparisonSector.CalendarsSold</div>
                                        <div>Montant: €@comparisonSector.TotalAmount.ToString("N0").Replace(" ", "&nbsp;")</div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                }
            </div>

            <div class="sectors-container">
                <h2>Montants par secteur</h2>
                
                @if (stats.Sectors.Count == 0)
                {
                    <p>Aucune donnée disponible pour cette session.</p>
                }
                else
                {
                    <div class="sectors-grid">
                        @foreach (var sector in stats.Sectors)
                        {
                            <div class="sector-card @(comparisonEnabled && comparisonStats != null && comparisonStats.Sectors.Any(s => s.Id == sector.Id) ? "with-comparison" : "")" 
                                 style="border-left: 5px solid @sector.Color">
                                <h3>@sector.Name</h3>
                                <div class="sector-amount">€@sector.TotalAmount.ToString("N0").Replace(" ", "&nbsp;")</div>
                                <div class="sector-details">
                                    <div>Tours: @sector.ToursCount</div>
                                    <div>Calendriers vendus: @sector.CalendarsSold</div>
                                </div>
                                
                                @if (comparisonEnabled && comparisonStats != null)
                                {
                                    var comparisonSector = comparisonStats.Sectors.FirstOrDefault(s => s.Id == sector.Id);
                                    if (comparisonSector != null)
                                    {
                                        <div class="sector-comparison">
                                            <h4>Comparaison</h4>
                                            <div class="comparison-values">
                                                @{
                                                    decimal sectorAmountDiff = sector.TotalAmount - comparisonSector.TotalAmount;
                                                    decimal sectorAmountPercent = comparisonSector.TotalAmount == 0 ? 0 : 
                                                        (sector.TotalAmount - comparisonSector.TotalAmount) / comparisonSector.TotalAmount * 100;
                                                    int sectorCalendarsDiff = sector.CalendarsSold - comparisonSector.CalendarsSold;
                                                    
                                                    string sectorAmountDiffClass = sectorAmountDiff >= 0 ? "positive" : "negative";
                                                    string sectorCalendarsDiffClass = sectorCalendarsDiff >= 0 ? "positive" : "negative";
                                                }
                                                
                                                <div class="amount-diff @sectorAmountDiffClass">
                                                    @(sectorAmountDiff >= 0 ? "+" : "")€@sectorAmountDiff.ToString("N0").Replace(" ", "&nbsp;") (@(sectorAmountPercent >= 0 ? "+" : "")@sectorAmountPercent.ToString("N1")%)
                                                </div>
                                                <div class="calendars-diff @sectorCalendarsDiffClass">
                                                    @(sectorCalendarsDiff >= 0 ? "+" : "")@sectorCalendarsDiff calendriers
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
</AuthorizeView>



@code {
    private bool isLoading = true;
    private string? errorMessage;
    private List<CalendarSession> sessions = new List<CalendarSession>();
    private int selectedSessionId = 0;
    private SessionStats stats = new SessionStats();
    
    // Variables pour la comparaison
    private bool comparisonEnabled = false;
    private int comparisonSessionId = 0;
    private SessionStats? comparisonStats = null;
    
    // JavaScript interop pour gérer les classes CSS responsives
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Appliquer les styles responsifs
            await JSRuntime.InvokeVoidAsync("applyResponsiveClasses");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Charger les sessions
            sessions = await SessionService.GetAllSessionsAsync();
            
            if (sessions.Count > 0)
            {
                // Sélectionner la session active ou la première session
                var activeSession = sessions.FirstOrDefault(s => s.IsActive);
                selectedSessionId = activeSession?.Id ?? sessions[0].Id;
                
                // Définir par défaut la session de comparaison comme la deuxième session si disponible
                if (sessions.Count > 1)
                {
                    comparisonSessionId = sessions
                        .FirstOrDefault(s => s.Id != selectedSessionId)?.Id ?? 0;
                }
                
                // Charger les statistiques
                await LoadSessionStats();
            }
            else
            {
                errorMessage = "Aucune session disponible.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors du chargement des données: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadSessionStats()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            
            // Charger les statistiques de la session principale
            stats = await SessionStatsService.GetSessionStatsAsync(selectedSessionId);
            
            // Si la comparaison est activée, charger les statistiques de la session de comparaison
            if (comparisonEnabled && comparisonSessionId > 0)
            {
                comparisonStats = await SessionStatsService.GetSessionStatsAsync(comparisonSessionId);
            }
            else
            {
                comparisonStats = null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors du chargement des statistiques: {ex.Message}";
            stats = new SessionStats();
            comparisonStats = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnSessionSelectedAsync()
    {
        // Si la session sélectionnée est la même que la session de comparaison,
        // choisir une autre session pour la comparaison
        if (comparisonEnabled && comparisonSessionId == selectedSessionId)
        {
            var newComparisonSession = sessions
                .FirstOrDefault(s => s.Id != selectedSessionId);
                
            if (newComparisonSession != null)
            {
                comparisonSessionId = newComparisonSession.Id;
            }
            else
            {
                comparisonEnabled = false;
                comparisonSessionId = 0;
            }
        }
        
        await LoadSessionStats();
    }
    
    private async Task OnComparisonSessionSelectedAsync()
    {
        if (selectedSessionId == comparisonSessionId)
        {
            // Trouver une autre session pour éviter de comparer une session avec elle-même
            var newMainSession = sessions
                .FirstOrDefault(s => s.Id != comparisonSessionId);
                
            if (newMainSession != null)
            {
                selectedSessionId = newMainSession.Id;
            }
        }
        await LoadSessionStats();
    }
    
    private async Task OnToggleComparisonAsync()
    {
        // Si la comparaison est activée mais qu'aucune session de comparaison n'est sélectionnée
        if (comparisonEnabled && (comparisonSessionId == 0 || comparisonSessionId == selectedSessionId))
        {
            var newComparisonSession = sessions
                .FirstOrDefault(s => s.Id != selectedSessionId);
                
            if (newComparisonSession != null)
            {
                comparisonSessionId = newComparisonSession.Id;
            }
            else
            {
                comparisonEnabled = false;
            }
        }
        
        await LoadSessionStats();
    }
    
    private string GetSessionName(int sessionId)
    {
        var session = sessions.FirstOrDefault(s => s.Id == sessionId);
        return session != null ? $"{session.Name} ({session.Year})" : "Session inconnue";
    }
}
