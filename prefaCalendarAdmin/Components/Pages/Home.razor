@page "/dashboard"
@using prefaCalendarAdmin.Models.Session
@using prefaCalendarAdmin.Services
@inject ISessionService SessionService
@inject ISessionStatsService SessionStatsService

<AuthorizeView>
    <div class="dashboard-container">

        @if (isLoading)
        {
            <div class="loading">Chargement des données...</div>
        }
        else if (errorMessage != null)
        {
            <div class="error">@errorMessage</div>
        }
        else
        {
            <div class="session-selector">
                <label>Session: </label>
                <select class="form-select" value="@selectedSessionId" @onchange="OnSessionChanged">
                    @foreach (var session in sessions)
                    {
                        <option value="@session.Id">@session.Name (@session.Year)</option>
                    }
                </select>
            </div>

            <div class="total-amount">
                <h2>Montant total global</h2>
                <div class="amount">€@stats.TotalAmount.ToString("N2")</div>
                <div class="calendars-sold">@stats.TotalCalendarsSold calendriers vendus</div>
            </div>

            <div class="sectors-container">
                <h2>Montants par secteur</h2>
                
                @if (stats.Sectors.Count == 0)
                {
                    <p>Aucune donnée disponible pour cette session.</p>
                }
                else
                {
                    <div class="sectors-grid">
                        @foreach (var sector in stats.Sectors)
                        {
                            <div class="sector-card" style="border-left: 5px solid @sector.Color">
                                <h3>@sector.Name</h3>
                                <div class="sector-amount">€@sector.TotalAmount.ToString("N2")</div>
                                <div class="sector-details">
                                    <div>Tours: @sector.ToursCount</div>
                                    <div>Calendriers vendus: @sector.CalendarsSold</div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
</AuthorizeView>

<style>
    .dashboard-container {
        padding: 20px;
    }

    h1.text-danger {
        margin-bottom: 30px;
        font-size: 48px;
        text-align: center;
    }

    .loading, .error {
        text-align: center;
        margin: 30px 0;
        font-size: 18px;
    }

    .error {
        color: red;
    }

    .session-selector {
        margin-bottom: 30px;
        max-width: 400px;
    }

    .total-amount {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 30px;
        text-align: center;
    }

    .total-amount h2 {
        margin-bottom: 15px;
        font-size: 24px;
    }

    .amount {
        font-size: 36px;
        font-weight: bold;
        color: #28a745;
    }
    
    .calendars-sold {
        font-size: 18px;
        color: #6c757d;
        margin-top: 5px;
    }

    .sectors-container h2 {
        margin-bottom: 20px;
        font-size: 24px;
    }

    .sectors-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
    }

    .sector-card {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        padding: 20px;
    }

    .sector-card h3 {
        margin-bottom: 10px;
        font-size: 20px;
    }

    .sector-amount {
        font-size: 24px;
        font-weight: bold;
        color: #007bff;
        margin-bottom: 10px;
    }

    .sector-details {
        color: #6c757d;
    }
</style>

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private List<CalendarSession> sessions = new List<CalendarSession>();
    private int selectedSessionId = 0;
    private SessionStats stats = new SessionStats();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Charger les sessions
            sessions = await SessionService.GetAllSessionsAsync();
            
            if (sessions.Count > 0)
            {
                // Sélectionner la session active ou la première session
                var activeSession = sessions.FirstOrDefault(s => s.IsActive);
                selectedSessionId = activeSession?.Id ?? sessions[0].Id;
                
                // Charger les statistiques
                await LoadSessionStats();
            }
            else
            {
                errorMessage = "Aucune session disponible.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors du chargement des données: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadSessionStats()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            
            stats = await SessionStatsService.GetSessionStatsAsync(selectedSessionId);
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors du chargement des statistiques: {ex.Message}";
            stats = new SessionStats();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnSessionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int sessionId))
        {
            selectedSessionId = sessionId;
            await LoadSessionStats();
        }
    }
}
