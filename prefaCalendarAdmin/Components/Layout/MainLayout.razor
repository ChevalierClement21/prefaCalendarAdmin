@inherits LayoutComponentBase

@using prefaCalendarAdmin.Services
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="page">
    @if (isAuthenticated)
    {
        <div class="sidebar">
            <NavMenu />
        </div>
    }

    <main>
        <div class="top-row px-4 d-flex justify-content-between align-items-center">
            <div>
                <span class="app-title">PrefaCalendar Admin</span>
            </div>
            <div>
                @if (isAuthenticated)
                {
                    <span class="user-name me-3">@currentUserName</span>
                    <button class="logout-btn" @onclick="Logout">
                        <i class="bi bi-box-arrow-right me-1"></i>
                        Déconnexion
                    </button>
                }
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private bool isAuthenticated = false;
    private string currentUserName = string.Empty;
    private Models.UserWithRoles? currentUser;
    
    protected override async Task OnInitializedAsync()
    {
        await CheckAuthentication();
    }
    
    private async Task CheckAuthentication()
    {
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        
        if (isAuthenticated)
        {
            currentUser = await AuthService.GetCurrentUserAsync();
            if (currentUser != null)
            {
                currentUserName = $"{currentUser.Firstname} {currentUser.Lastname}";
                
                // Vérifier si l'utilisateur est admin
                bool isAdmin = await AuthService.IsAdminAsync();
                if (!isAdmin)
                {
                    // Si l'utilisateur n'est pas admin, le déconnecter et rediriger
                    await Logout();
                }
            }
        }
        else if (!NavigationManager.Uri.Contains("/login"))
        {
            // Rediriger vers la page de connexion si l'utilisateur n'est pas authentifié
            NavigationManager.NavigateTo("/login", true);
        }
    }
    
    private async Task Logout()
    {
        await AuthService.Logout();
        isAuthenticated = false;
        currentUserName = string.Empty;
        NavigationManager.NavigateTo("/login");
    }
}
